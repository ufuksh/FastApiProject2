"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const test_1 = require("@oclif/test");
const test_utils_1 = require("../__tests__/test-utils");
require("chai");
describe('typegen', () => {
    describe('output', () => {
        test_1.test
            .stdout()
            .command(['typegen', (0, test_utils_1.resourcePath)('openapi.yml')])
            .it('generates import statements', (ctx) => {
            (0, test_1.expect)(ctx.stdout).to.match(/import type/);
        });
        test_1.test
            .stdout()
            .command(['typegen', (0, test_utils_1.resourcePath)('openapi.json')])
            .it('generates schemas', (ctx) => {
            (0, test_1.expect)(ctx.stdout).to.match(/Schemas/);
            (0, test_1.expect)(ctx.stdout).to.match(/Pet/);
        });
        test_1.test
            .stdout()
            .command(['typegen', (0, test_utils_1.resourcePath)('openapi.json')])
            .it('generates operation paths', (ctx) => {
            (0, test_1.expect)(ctx.stdout).to.match(/Paths/);
            (0, test_1.expect)(ctx.stdout).to.match(/Responses/);
            (0, test_1.expect)(ctx.stdout).to.match(/PetRes/);
            (0, test_1.expect)(ctx.stdout).to.match(/Parameters/);
            (0, test_1.expect)(ctx.stdout).to.match(/ListPetsRes/);
        });
        test_1.test
            .stdout()
            .command(['typegen', (0, test_utils_1.resourcePath)('openapi.json'), '--client'])
            .it('exports operation methods', (ctx) => {
            (0, test_1.expect)(ctx.stdout).to.match(/export interface OperationMethods/);
            (0, test_1.expect)(ctx.stdout).to.match(/getPets/);
            (0, test_1.expect)(ctx.stdout).to.match(/createPet/);
            (0, test_1.expect)(ctx.stdout).to.match(/getPetById/);
        });
        test_1.test
            .stdout()
            .command(['typegen', (0, test_utils_1.resourcePath)('openapi.json'), '--client'])
            .it('exports paths dictionary', (ctx) => {
            (0, test_1.expect)(ctx.stdout).to.match(/export interface PathsDictionary/);
            (0, test_1.expect)(ctx.stdout).to.match(/\/pets/);
            (0, test_1.expect)(ctx.stdout).to.match(/\/pets\/\{id\}/);
        });
        test_1.test
            .stdout()
            .command(['typegen', (0, test_utils_1.resourcePath)('openapi.json'), '--client'])
            .it('exports Client type', (ctx) => {
            (0, test_1.expect)(ctx.stdout).to.match(/export type Client/);
        });
        test_1.test
            .stdout()
            .command(['typegen', (0, test_utils_1.resourcePath)('openapi.json'), '--backend'])
            .it('exports Backend operations', (ctx) => {
            (0, test_1.expect)(ctx.stdout).to.match(/export interface Operations/);
            (0, test_1.expect)(ctx.stdout).to.match(/getPets/);
            (0, test_1.expect)(ctx.stdout).to.match(/createPet/);
            (0, test_1.expect)(ctx.stdout).to.match(/getPetById/);
        });
        test_1.test
            .stdout()
            .command(['typegen', (0, test_utils_1.resourcePath)('openapi.json'), '--backend'])
            .it('exports Backend types', (ctx) => {
            (0, test_1.expect)(ctx.stdout).to.match(/export type OperationContext/);
            (0, test_1.expect)(ctx.stdout).to.match(/export type OperationResponse/);
            (0, test_1.expect)(ctx.stdout).to.match(/export type OperationHandler/);
        });
        test_1.test
            .stdout()
            .command(['typegen', (0, test_utils_1.resourcePath)('openapi.json'), '-A'])
            .it('generates module level schema aliases', (ctx) => {
            (0, test_1.expect)(ctx.stdout).to.match(/export type Pet = Components.Schemas.Pet/);
        });
        test_1.test
            .stdout()
            .command(['typegen', (0, test_utils_1.resourcePath)('openapi.json'), '-b', '/* Generated by openapicmd */'])
            .it('adds file banner', (ctx) => {
            (0, test_1.expect)(ctx.stdout).to.match(/Generated by openapicmd/);
        });
        test_1.test
            .stdout()
            .command(['typegen', (0, test_utils_1.resourcePath)('openapi.json'), '--client', '--backend'])
            .it('exports both client and backend', (ctx) => {
            (0, test_1.expect)(ctx.stdout).to.match(/export type Client/);
            (0, test_1.expect)(ctx.stdout).to.match(/export type OperationHandler/);
            (0, test_1.expect)(ctx.stdout).to.match(/export interface Operations/);
            (0, test_1.expect)(ctx.stdout).to.match(/export interface OperationMethods/);
        });
    });
});
