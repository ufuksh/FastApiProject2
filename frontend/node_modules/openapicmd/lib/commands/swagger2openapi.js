"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Swagger2Openapi = void 0;
const core_1 = require("@oclif/core");
const s2o = require("swagger2openapi");
const util_1 = require("util");
const commonFlags = require("../common/flags");
const definition_1 = require("../common/definition");
class Swagger2Openapi extends core_1.Command {
    async run() {
        const { args, flags } = await this.parse(Swagger2Openapi);
        const { dereference, bundle, validate, header, root, strip } = flags;
        // parse definition
        const definition = (0, definition_1.resolveDefinition)(args.definition);
        if (!definition) {
            this.error('Please load a definition file', { exit: 1 });
        }
        const swagger = await (0, definition_1.parseDefinition)({ definition, dereference, bundle, validate, header, root, strip });
        // convert to swagger
        let document;
        try {
            const convertOptions = {}; // @TODO: take in some flags?
            const converted = await (0, util_1.promisify)(s2o.convertObj)(swagger, convertOptions);
            document = converted.openapi;
        }
        catch (err) {
            this.error(err, { exit: 1 });
        }
        // output in correct format
        const format = flags.format === 'json' || flags.json ? definition_1.OutputFormat.JSON : definition_1.OutputFormat.YAML;
        this.log((0, definition_1.stringifyDocument)({ document, format }));
    }
}
exports.Swagger2Openapi = Swagger2Openapi;
Swagger2Openapi.description = 'Convert Swagger 2.0 definitions to OpenAPI 3.0.x';
Swagger2Openapi.examples = [`$ openapi swagger2openapi --yaml ./swagger.json > openapi.yml`];
Swagger2Openapi.flags = {
    ...commonFlags.help(),
    ...commonFlags.parseOpts(),
    ...commonFlags.outputFormat(),
};
Swagger2Openapi.args = {
    definition: core_1.Args.string({
        description: 'input definition file'
    })
};
