"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwaggerUI = void 0;
const core_1 = require("@oclif/core");
const url_1 = require("url");
const fs = require("fs");
const path = require("path");
const proxy = require("koa-proxy");
const mount = require("koa-mount");
const commonFlags = require("../common/flags");
const definition_1 = require("../common/definition");
const koa_1 = require("../common/koa");
const swagger_ui_1 = require("../common/swagger-ui");
const utils_1 = require("../common/utils");
class SwaggerUI extends core_1.Command {
    async run() {
        const { args, flags } = await this.parse(SwaggerUI);
        const { port, logger, bundle, header, root } = flags;
        const definition = (0, definition_1.resolveDefinition)(args.definition);
        const app = (0, koa_1.createServer)({ logger });
        let proxyPath;
        let documentPath;
        let document;
        const openApiFile = 'openapi.json';
        if (definition) {
            if (definition.match('://') && !flags.server && !flags.proxy) {
                // use remote definition
                documentPath = definition;
            }
            else {
                // parse definition
                document = await (0, definition_1.parseDefinition)({
                    definition,
                    servers: flags.server,
                    inject: flags.inject,
                    strip: flags.strip,
                    excludeExt: flags === null || flags === void 0 ? void 0 : flags['exclude-ext'],
                    removeUnreferenced: flags === null || flags === void 0 ? void 0 : flags['remove-unreferenced'],
                    header,
                    root,
                });
                documentPath = `./${openApiFile}`;
            }
        }
        // parse opts for Swagger UI from flags
        const swaggerUIOpts = {
            docExpansion: flags.expand,
            displayOperationId: flags.operationids,
            filter: flags.filter,
            deepLinking: flags.deeplinks,
            withCredentials: flags.withcredentials,
            displayRequestDuration: flags.requestduration,
        };
        if (bundle) {
            // bundle files to directory
            const bundleDir = path.resolve(bundle);
            // create a directory if one does not exist
            if (!fs.existsSync(bundleDir)) {
                fs.mkdirSync(bundleDir);
            }
            // copy dist files
            for (const file of fs.readdirSync(swagger_ui_1.swaggerUIRoot)) {
                const src = path.join(swagger_ui_1.swaggerUIRoot, file);
                const target = path.join(bundleDir, file);
                fs.copyFileSync(src, target);
                this.log(`${target}`);
            }
            // copy openapi definition file
            if (document) {
                const openApiPath = path.join(bundleDir, openApiFile);
                fs.writeFileSync(openApiPath, JSON.stringify(document));
                this.log(`${openApiPath}`);
            }
            // rewrite swagger-initializer.js
            const scriptPath = path.join(bundleDir, 'swagger-initializer.js');
            fs.writeFileSync(scriptPath, (0, swagger_ui_1.getSwaggerUIInitializerScript)({ url: documentPath, ...swaggerUIOpts }));
            this.log(path.join(bundleDir, 'index.html'));
        }
        else {
            if (flags.proxy) {
                // set up a proxy for the api
                let serverURL = null;
                if (document.servers && document.servers[0]) {
                    serverURL = document.servers[0].url;
                }
                if (flags.server && typeof flags.server === 'object') {
                    serverURL = flags.server[0];
                }
                if (flags.server && typeof flags.server === 'string') {
                    serverURL = flags.server;
                }
                if (!serverURL) {
                    this.error('Unable to find server URL from definition, please provide a --server parameter');
                }
                const apiUrl = new url_1.URL(serverURL);
                const proxyOpts = {
                    host: `${apiUrl.protocol}//${apiUrl.host}`,
                    map: (path) => {
                        if (flags.root) {
                            return `${flags.root}${path}`;
                        }
                        if (apiUrl.pathname === '/') {
                            return path;
                        }
                        return `${apiUrl.pathname}${path}`;
                    },
                    jar: flags.withcredentials,
                };
                proxyPath = '/proxy';
                app.use(mount(proxyPath, (ctx, next) => {
                    ctx.request.header = {
                        ...ctx.request.header,
                        ...(0, utils_1.parseHeaderFlag)(header),
                    };
                    return proxy(proxyOpts)(ctx, next);
                }));
                document.servers = [{ url: proxyPath }, ...document.servers];
            }
            if (document) {
                // serve the openapi file
                app.use(mount(`/${openApiFile}`, (ctx) => {
                    ctx.body = JSON.stringify(document);
                }));
            }
            // serve swagger ui
            app.use(mount('/', (0, swagger_ui_1.serveSwaggerUI)({ url: documentPath, ...swaggerUIOpts })));
            // start server
            const { port: portRunning } = await (0, koa_1.startServer)({ app, port });
            this.log(`Swagger UI running at http://localhost:${portRunning}`);
            if (document) {
                this.log(`OpenAPI definition at http://localhost:${portRunning}/${openApiFile}`);
            }
            if (proxyPath) {
                this.log(`Proxy running at http://localhost:${portRunning}${proxyPath}`);
            }
            this.log();
        }
    }
}
exports.SwaggerUI = SwaggerUI;
SwaggerUI.description = 'Start or bundle a Swagger UI instance';
SwaggerUI.examples = [
    '$ openapi swagger-ui',
    '$ openapi swagger-ui ./openapi.yml',
    '$ openapi swagger-ui ./openapi.yml --bundle outDir',
];
SwaggerUI.flags = {
    ...commonFlags.help(),
    ...commonFlags.serverOpts(),
    ...commonFlags.servers(),
    ...commonFlags.inject(),
    ...commonFlags.strip(),
    ...commonFlags.excludeExt(),
    ...commonFlags.swaggerUIOpts(),
    ...commonFlags.header(),
    ...commonFlags.apiRoot(),
    bundle: core_1.Flags.string({
        char: 'B',
        description: 'bundle a static site to directory',
        helpValue: 'outDir',
    }),
    proxy: core_1.Flags.boolean({
        description: 'set up a proxy for the api to avoid CORS issues',
        exclusive: ['bundle'],
    }),
};
SwaggerUI.args = {
    definition: core_1.Args.string({
        description: 'input definition file'
    })
};
