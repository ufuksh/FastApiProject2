"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Init = void 0;
const core_1 = require("@oclif/core");
const definition_1 = require("../common/definition");
const commonFlags = require("../common/flags");
const deepMerge = require("deepmerge");
class Init extends core_1.Command {
    async run() {
        const { flags } = await this.parse(Init);
        const { title, version, server, inject, license, description, terms } = flags;
        const OPENAPI_VERSION = '3.0.0';
        const info = {
            title,
            version,
        };
        if (description) {
            info.description = description;
        }
        if (terms) {
            info.termsOfService = terms;
        }
        if (license) {
            switch (license) {
                case 'apache2':
                    info.license = {
                        name: 'Apache 2.0',
                        url: 'http://www.apache.org/licenses/LICENSE-2.0.html',
                    };
                    break;
                case 'mit':
                    info.license = {
                        name: 'MIT',
                        url: 'https://opensource.org/licenses/MIT',
                    };
                    break;
            }
        }
        let document = {
            openapi: OPENAPI_VERSION,
            info,
            paths: {},
        };
        // merge injected JSON
        if (inject) {
            for (const json of inject) {
                try {
                    const parsed = JSON.parse(json);
                    document = deepMerge(document, parsed);
                }
                catch (err) {
                    console.error('Could not parse inject JSON');
                    throw err;
                }
            }
        }
        if (server) {
            const { paths, ...d } = document;
            document = {
                ...d,
                servers: server.map((url) => ({ url })),
                paths,
            };
        }
        const format = flags.format === 'json' || flags.json ? definition_1.OutputFormat.JSON : definition_1.OutputFormat.YAML;
        this.log((0, definition_1.stringifyDocument)({ document, format }));
    }
}
exports.Init = Init;
Init.description = 'Initialise a definition file from scratch';
Init.examples = [`$ openapi init --title 'My API' > openapi.yml`];
Init.flags = {
    ...commonFlags.help(),
    title: core_1.Flags.string({ char: 'T', description: 'The title for the API', default: 'My API' }),
    description: core_1.Flags.string({ char: 'd', description: 'Description for the API' }),
    version: core_1.Flags.string({ char: 'v', description: 'Version of the API', default: '0.0.1' }),
    terms: core_1.Flags.string({ description: 'A URL to the Terms of Service for the API.' }),
    license: core_1.Flags.string({ description: 'The license for the API', options: ['mit', 'apache2'] }),
    ...commonFlags.servers(),
    ...commonFlags.inject(),
    ...commonFlags.outputFormat(),
};
