import { Command } from '@oclif/core';
export declare class Typegen extends Command {
    static description: string;
    static examples: string[];
    static flags: {
        banner: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
        client: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        backend: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        "type-aliases": import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        'remove-unreferenced': import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        strip: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
        'exclude-ext': import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
        inject: import("@oclif/core/lib/interfaces").OptionFlag<string[], import("@oclif/core/lib/interfaces").CustomOptions>;
        server: import("@oclif/core/lib/interfaces").OptionFlag<string[], import("@oclif/core/lib/interfaces").CustomOptions>;
        validate: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        header: import("@oclif/core/lib/interfaces").OptionFlag<string[], import("@oclif/core/lib/interfaces").CustomOptions>;
        root: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
        dereference: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        bundle: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        help: import("@oclif/core/lib/interfaces").BooleanFlag<void>;
    };
    static args: {
        definition: import("@oclif/core/lib/interfaces").Arg<string, Record<string, unknown>>;
    };
    run(): Promise<void>;
    private mode;
    private outputBanner;
    private outputTypes;
}
