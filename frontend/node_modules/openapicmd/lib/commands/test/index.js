"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Test = void 0;
const core_1 = require("@jest/core");
const core_2 = require("@oclif/core");
const commonFlags = require("../../common/flags");
const path = require("path");
const debug_1 = require("debug");
const config_1 = require("../../common/config");
const definition_1 = require("../../common/definition");
const context_1 = require("../../common/context");
const prompt_1 = require("../../common/prompt");
const debug = (0, debug_1.default)('cmd');
class Test extends core_2.Command {
    async run() {
        var _a, _b;
        const { args, flags } = await this.parse(Test);
        const { dereference, validate, bundle, header } = flags;
        // store flags in context
        (0, context_1.setContext)((ctx) => ({ ...ctx, flags }));
        const definition = (0, definition_1.resolveDefinition)(args.definition);
        if (!definition) {
            this.error('Please load a definition file', { exit: 1 });
        }
        let document;
        try {
            document = await (0, definition_1.parseDefinition)({
                definition,
                dereference,
                bundle,
                validate,
                servers: flags.server,
                inject: flags.inject,
                strip: flags.strip,
                header,
                induceServers: true,
            });
        }
        catch (err) {
            this.error(err, { exit: 1 });
        }
        // make sure we have a server in the document
        if (!((_a = document.servers) === null || _a === void 0 ? void 0 : _a.some((s) => s.url))) {
            const res = await (0, prompt_1.maybePrompt)({
                name: 'server',
                message: 'please enter a server URL',
                type: 'input',
                default: 'http://localhost:9000',
                // must be a valid URL
                validate: (value) => {
                    try {
                        new URL(value);
                        return true;
                    }
                    catch (err) {
                        return 'must be a valid URL';
                    }
                }
            });
            if (res.server) {
                document.servers = [{ url: res.server }];
            }
            else {
                this.error('no server URL provided, use --server or modify your API spec', { exit: 1 });
            }
        }
        // store document in context
        (0, context_1.setContext)((ctx) => ({ ...ctx, document }));
        const testConfig = (0, config_1.getConfigValue)('tests');
        if (!testConfig) {
            this.error('No tests configured. Please run `test add` first', { exit: 1 });
        }
        // make sure we have a server in the document
        if (!((_b = document.servers) === null || _b === void 0 ? void 0 : _b.some((s) => s.url))) {
            const res = await (0, prompt_1.maybePrompt)({
                name: 'server',
                message: 'please enter a server URL',
                type: 'input',
                default: 'http://localhost:9000',
                // must be a valid URL
                validate: (value) => {
                    try {
                        new URL(value);
                        return true;
                    }
                    catch (err) {
                        return 'must be a valid URL';
                    }
                }
            });
            if (res.server) {
                document.servers = [{ url: res.server }];
            }
            else {
                this.error('no server URL provided, use --server or modify your API spec', { exit: 1 });
            }
        }
        const jestArgv = {
            ...flags,
            $0: 'jest',
            _: [],
            passWithNoTests: true,
            verbose: true,
        };
        // filter tests by operation
        if (flags.operation) {
            jestArgv.testNamePattern = flags.operation.map((o) => `${o} `).join('|');
        }
        const testFile = require.resolve('../../tests/run-jest');
        const testProjectDir = path.dirname(testFile);
        jestArgv.noStackTrace = true;
        jestArgv.rootDir = testProjectDir;
        jestArgv.runTestsByPath = true;
        jestArgv.runInBand = true;
        jestArgv._ = [testFile];
        // set no interactive mode for jest
        (0, context_1.setContext)((ctx) => ({ ...ctx, flags: { ...ctx.flags, interactive: false } }));
        debug('jestArgv', jestArgv);
        await (0, core_1.runCLI)(jestArgv, [testProjectDir]);
    }
}
exports.Test = Test;
Test.description = 'Run automated tests against APIs';
Test.examples = [
    `$ openapi test`,
    `$ openapi test -o getPets`,
];
Test.flags = {
    ...commonFlags.help(),
    ...commonFlags.parseOpts(),
    ...commonFlags.interactive(),
    operation: core_2.Flags.string({ char: 'o', description: 'filter by operationId', helpValue: 'operationId', multiple: true }),
    verbose: core_2.Flags.boolean({
        char: 'v',
        description: 'verbose mode',
        default: false,
    }),
    ...commonFlags.securityOpts(),
};
