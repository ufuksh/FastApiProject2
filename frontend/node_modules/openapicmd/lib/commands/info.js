"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Info = void 0;
const core_1 = require("@oclif/core");
const definition_1 = require("../common/definition");
const commonFlags = require("../common/flags");
class Info extends core_1.Command {
    async run() {
        var _a, _b;
        const { args, flags } = await this.parse(Info);
        const { dereference, bundle, validate, header } = flags;
        const definition = (0, definition_1.resolveDefinition)(args.definition);
        if (!definition) {
            this.error('Please load a definition file', { exit: 1 });
        }
        let document;
        try {
            document = await (0, definition_1.parseDefinition)({
                definition,
                dereference,
                bundle,
                validate,
                strip: flags.strip,
                servers: flags.server,
                inject: flags.inject,
                excludeExt: flags === null || flags === void 0 ? void 0 : flags['exclude-ext'],
                removeUnreferenced: flags === null || flags === void 0 ? void 0 : flags['remove-unreferenced'],
                header,
            });
        }
        catch (err) {
            this.error(err, { exit: 1 });
        }
        this.log(`Loaded: ${definition}`);
        this.log();
        (0, definition_1.printInfo)(document, this);
        this.printServers(document);
        if (flags.operations) {
            this.log();
            this.printOperations(document);
        }
        else {
            this.log();
            this.log(`operations: ${(0, definition_1.getOperations)(document).length}`);
            this.log(`tags: ${document.tags ? document.tags.length : 0}`);
        }
        if (flags.schemas) {
            this.log();
            this.printSchemas(document);
        }
        else {
            this.log(`schemas: ${((_a = document.components) === null || _a === void 0 ? void 0 : _a.schemas) ? Object.entries(document.components.schemas).length : 0}`);
        }
        if (flags.security) {
            this.log();
            this.printSecuritySchemes(document);
        }
        else {
            this.log(`securitySchemes: ${((_b = document.components) === null || _b === void 0 ? void 0 : _b.securitySchemes) ? Object.entries(document.components.securitySchemes).length : 0}`);
        }
    }
    printOperations(document) {
        const operations = {};
        if (document.tags) {
            for (const tag of document.tags) {
                const { name, description } = tag;
                operations[name] = {
                    description,
                    routes: [],
                };
            }
        }
        for (const path in document.paths) {
            if (document.paths[path]) {
                for (const method in document.paths[path]) {
                    if (document.paths[path][method]) {
                        const { operationId, summary, description, tags } = document.paths[path][method];
                        let route = `${method.toUpperCase()} ${path}`;
                        if (summary) {
                            route = `${route} - ${summary}`;
                        }
                        else if (description) {
                            route = `${route} - ${description}`;
                        }
                        if (operationId) {
                            route = `${route} (${operationId})`;
                        }
                        for (const tag of tags || ['default']) {
                            if (!operations[tag]) {
                                operations[tag] = { routes: [] };
                            }
                            operations[tag].routes.push(route);
                        }
                    }
                }
            }
        }
        this.log(`operations (${(0, definition_1.getOperations)(document).length}):`);
        for (const tag in operations) {
            if (operations[tag]) {
                const routes = operations[tag].routes;
                for (const route of routes) {
                    this.log(`- ${route}`);
                }
            }
        }
    }
    printSchemas(document) {
        const schemas = (document.components && document.components.schemas) || {};
        const count = Object.entries(schemas).length;
        if (count > 0) {
            this.log(`schemas (${count}):`);
            for (const schema in schemas) {
                if (schemas[schema]) {
                    this.log(`- ${schema}`);
                }
            }
        }
    }
    printServers(document) {
        var _a;
        const servers = (_a = document.servers) !== null && _a !== void 0 ? _a : [];
        if (servers.length > 0) {
            this.log(`servers:`);
            for (const server of servers) {
                this.log(`- ${server.url}${server.description ? ` (${server.description})` : ''}`);
            }
        }
        else {
            this.log('servers: 0');
        }
    }
    printSecuritySchemes(document) {
        var _a;
        const securitySchemes = ((_a = document.components) === null || _a === void 0 ? void 0 : _a.securitySchemes) || {};
        const count = Object.entries(securitySchemes).length;
        if (count > 0) {
            this.log(`securitySchemes (${count}):`);
            for (const scheme in securitySchemes) {
                if (securitySchemes[scheme]) {
                    this.log(`- ${scheme}: (${[
                        securitySchemes[scheme]['type'],
                        securitySchemes[scheme]['scheme'],
                        securitySchemes[scheme]['name'],
                    ]
                        .filter(Boolean)
                        .join(', ')}) ${securitySchemes[scheme]['description']}`);
                }
            }
        }
    }
}
exports.Info = Info;
Info.description = 'Display API information';
Info.examples = [
    '$ openapi info https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml',
    `$ openapi info ./openapi.yml`,
];
Info.flags = {
    ...commonFlags.help(),
    ...commonFlags.parseOpts(),
    security: core_1.Flags.boolean({ description: 'list security schemes in document', default: false }),
    operations: core_1.Flags.boolean({ description: 'list operations in document', default: false }),
    schemas: core_1.Flags.boolean({ description: 'list schemas in document', default: false }),
};
Info.args = {
    definition: core_1.Args.string({
        description: 'input definition file'
    })
};
