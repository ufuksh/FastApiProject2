"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const test_1 = require("@oclif/test");
const test_utils_1 = require("../__tests__/test-utils");
const SwaggerParser = require("@apidevtools/swagger-parser");
const YAML = require("js-yaml");
require("chai");
describe('read', () => {
    describe('output', () => {
        test_1.test
            .stdout()
            .command(['read', (0, test_utils_1.resourcePath)('openapi.yml')])
            .it('reads yaml openapi spec', (ctx) => {
            const output = YAML.load(ctx.stdout);
            (0, test_1.expect)(output).to.deep.equal(test_utils_1.testDefinition);
        });
        test_1.test
            .stdout()
            .command(['read', (0, test_utils_1.resourcePath)('openapi-with-internal.yml'), '--exclude-ext', 'x-internal'])
            .it('reads yaml openapi spec exluding operations and resources with x-internal', (ctx) => {
            const output = YAML.load(ctx.stdout);
            (0, test_1.expect)(output).to.deep.equal(test_utils_1.testDefinitionWithoutInternal);
        });
        test_1.test
            .stdout()
            .command(['read', (0, test_utils_1.resourcePath)('openapi-with-internal.yml'), '--exclude-ext', 'x-internal', '--remove-unreferenced'])
            .it('reads yaml openapi spec exluding operations and resources with x-internal and also remove unreferenced components', (ctx) => {
            const output = YAML.load(ctx.stdout);
            (0, test_1.expect)(output).to.deep.equal(test_utils_1.testDefinitionWithoutInternalAndUnreferenced);
        });
        test_1.test
            .stdout()
            .command(['read', (0, test_utils_1.resourcePath)('openapi.json')])
            .it('reads json openapi spec', (ctx) => {
            const output = YAML.load(ctx.stdout);
            (0, test_1.expect)(output).to.deep.equal(test_utils_1.testDefinition);
        });
        test_1.test
            .nock('https://myapi.com', (api) => api.get('/openapi.json').reply(200, test_utils_1.testDefinition))
            .stdout()
            .command(['read', 'https://myapi.com/openapi.json'])
            .it('reads remote openapi spec', (ctx) => {
            const output = YAML.load(ctx.stdout);
            (0, test_1.expect)(output).to.deep.equal(test_utils_1.testDefinition);
        });
        test_1.test
            .stdout()
            .command(['read', (0, test_utils_1.resourcePath)('openapi.json'), '--server', 'http://localhost:9999'])
            .it('can add a server', (ctx) => {
            const output = YAML.load(ctx.stdout);
            (0, test_1.expect)(output.servers[0].url).to.equal('http://localhost:9999');
        });
        test_1.test
            .stdout()
            .command(['read', (0, test_utils_1.resourcePath)('openapi.json'), '-S', 'http://localhost:9998', '-S', 'http://localhost:9999'])
            .it('can add multiple servers', (ctx) => {
            const output = YAML.load(ctx.stdout);
            (0, test_1.expect)(output.servers[0].url).to.equal('http://localhost:9998');
            (0, test_1.expect)(output.servers[1].url).to.equal('http://localhost:9999');
        });
        test_1.test
            .stdout()
            .command(['read', (0, test_utils_1.resourcePath)('openapi.yml'), '--json'])
            .it('reads openapi spec and outputs json', (ctx) => {
            const output = JSON.parse(ctx.stdout);
            (0, test_1.expect)(output).to.deep.equal(test_utils_1.testDefinition);
        });
        test_1.test
            .stdout()
            .command(['read', (0, test_utils_1.resourcePath)('openapi.json'), '--yaml'])
            .it('reads openapi spec and outputs yaml', (ctx) => {
            const output = YAML.load(ctx.stdout);
            (0, test_1.expect)(output).to.deep.equal(test_utils_1.testDefinition);
        });
    });
    describe('--validate', () => {
        test_1.test
            .stdout()
            .command(['read', (0, test_utils_1.resourcePath)('openapi.yml'), '--validate'])
            .it('validates correct openapi file', async (ctx) => {
            const output = YAML.load(ctx.stdout);
            const expected = await SwaggerParser.validate((0, test_utils_1.resourcePath)('openapi.yml'));
            (0, test_1.expect)(output).to.deep.equal(expected);
        });
        test_1.test
            .command(['read', (0, test_utils_1.resourcePath)('openapi-broken.yml'), '--validate'])
            .exit(1)
            .it('validates incorrect openapi file, exits with code 1');
    });
    describe('--dereference', () => {
        test_1.test
            .stdout()
            .command(['read', (0, test_utils_1.resourcePath)('openapi.yml'), '--dereference'])
            .it('resolves $ref pointers from an openapi file', async (ctx) => {
            const output = YAML.load(ctx.stdout);
            const expected = await SwaggerParser.dereference((0, test_utils_1.resourcePath)('openapi.yml'));
            (0, test_1.expect)(output).to.deep.equal(expected);
        });
        describe('--bundle', () => {
            test_1.test
                .stdout()
                .command(['read', (0, test_utils_1.resourcePath)('openapi.yml'), '--bundle'])
                .it('resolves remote $ref pointers from an openapi file', async (ctx) => {
                const output = YAML.load(ctx.stdout);
                const expected = await SwaggerParser.bundle((0, test_utils_1.resourcePath)('openapi.yml'));
                (0, test_1.expect)(output).to.deep.equal(expected);
            });
        });
    });
});
