"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mock = void 0;
const core_1 = require("@oclif/core");
const bodyparser = require("koa-bodyparser");
const cors = require("@koa/cors");
const mount = require("koa-mount");
const openapi_backend_1 = require("openapi-backend");
const commonFlags = require("../common/flags");
const koa_1 = require("../common/koa");
const swagger_ui_1 = require("../common/swagger-ui");
const definition_1 = require("../common/definition");
class Mock extends core_1.Command {
    async run() {
        const { args, flags } = await this.parse(Mock);
        const { port, logger, 'swagger-ui': swaggerui, validate, header, root } = flags;
        let portRunning = port;
        const definition = (0, definition_1.resolveDefinition)(args.definition);
        if (!definition) {
            this.error('Please load a definition file', { exit: 1 });
        }
        let document;
        try {
            document = await (0, definition_1.parseDefinition)({
                definition,
                validate,
                servers: flags.server,
                inject: flags.inject,
                strip: flags.strip,
                excludeExt: flags === null || flags === void 0 ? void 0 : flags['exclude-ext'],
                removeUnreferenced: flags === null || flags === void 0 ? void 0 : flags['remove-unreferenced'],
                header,
                root,
                induceServers: true,
            });
        }
        catch (err) {
            this.error(err, { exit: 1 });
        }
        const api = new openapi_backend_1.default({
            definition: document,
            validate,
            apiRoot: root,
        });
        api.register({
            validationFail: (c, ctx) => {
                ctx.status = 400;
                ctx.body = { err: c.validation.errors };
            },
            notFound: (c, ctx) => {
                ctx.status = 404;
                ctx.body = { err: 'not found' };
            },
            methodNotAllowed: (c, ctx) => {
                ctx.status = 405;
                ctx.body = { err: 'method not allowed' };
            },
            notImplemented: (c, ctx) => {
                const { status, mock } = c.api.mockResponseForOperation(c.operation.operationId);
                ctx.status = status;
                ctx.body = mock;
            },
        });
        await api.init();
        const app = (0, koa_1.createServer)({ logger });
        app.use(bodyparser());
        app.use(cors({ credentials: true }));
        // serve openapi.json
        const openApiFile = 'openapi.json';
        const documentPath = `/${openApiFile}`;
        app.use(mount(documentPath, async (ctx, next) => {
            await next();
            ctx.body = api.document;
            ctx.status = 200;
        }));
        // serve swagger ui
        if (swaggerui) {
            app.use(mount(`/${swaggerui}`, (0, swagger_ui_1.serveSwaggerUI)({ url: documentPath })));
        }
        // serve openapi-backend
        app.use((ctx) => api.handleRequest({
            method: ctx.request.method,
            path: ctx.request.path,
            body: ctx.request.body,
            query: ctx.request.query,
            headers: ctx.request.headers,
        }, ctx));
        // start server
        const server = await (0, koa_1.startServer)({ app, port });
        portRunning = server.port;
        if (!document.servers || !document.servers.length) {
            api.document.servers = [{ url: `http://localhost:${portRunning}` }];
        }
        this.log();
        this.log(`Mock server running at http://localhost:${portRunning}`);
        if (swaggerui) {
            this.log(`Swagger UI running at http://localhost:${portRunning}/${swaggerui}`);
        }
        this.log(`OpenAPI definition at http://localhost:${portRunning}${documentPath}`);
        this.log();
    }
}
exports.Mock = Mock;
Mock.description = 'Start a local mock API server';
Mock.examples = [
    '$ openapi mock ./openapi.yml',
    '$ openapi mock https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml',
];
Mock.flags = {
    ...commonFlags.help(),
    ...commonFlags.serverOpts(),
    ...commonFlags.servers(),
    ...commonFlags.inject(),
    ...commonFlags.strip(),
    ...commonFlags.excludeExt(),
    ...commonFlags.header(),
    ...commonFlags.apiRoot(),
    'swagger-ui': core_1.Flags.string({ char: 'U', description: 'Swagger UI endpoint', helpValue: 'docs' }),
    validate: core_1.Flags.boolean({
        description: '[default: true] validate requests according to schema',
        default: true,
        allowNo: true,
    }),
};
Mock.args = {
    definition: core_1.Args.string({
        description: 'input definition file'
    })
};
