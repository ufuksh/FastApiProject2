"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.securityOpts = exports.swaggerUIOpts = exports.outputFormat = exports.serverOpts = exports.parseOpts = exports.apiRoot = exports.header = exports.validate = exports.strip = exports.removeUnreferencedComponents = exports.excludeExt = exports.inject = exports.servers = exports.interactive = exports.help = void 0;
const core_1 = require("@oclif/core");
const help = (overrides = {}) => ({
    help: core_1.Flags.help({ char: 'h', ...overrides }),
});
exports.help = help;
const interactive = () => ({
    interactive: core_1.Flags.boolean({
        description: '[default: true] enable CLI interactive mode',
        default: true,
        allowNo: true,
    }),
});
exports.interactive = interactive;
const servers = () => ({
    server: core_1.Flags.string({
        char: 'S',
        description: 'override servers definition',
        helpValue: 'http://localhost:9000',
        multiple: true,
    }),
});
exports.servers = servers;
const inject = () => ({
    inject: core_1.Flags.string({
        char: 'I',
        description: 'inject JSON to definition with deep merge',
        helpValue: '{"info":{"version":"1.0.0"}}',
        multiple: true,
    }),
});
exports.inject = inject;
const excludeExt = () => ({
    'exclude-ext': core_1.Flags.string({
        char: 'E',
        description: 'Specify an openapi extension to exclude parts of the spec',
        helpValue: 'x-internal',
        multiple: false,
    }),
});
exports.excludeExt = excludeExt;
const removeUnreferencedComponents = () => ({
    'remove-unreferenced': core_1.Flags.boolean({
        char: 'U',
        description: 'Remove unreferenced components, you can skip individual component being removed by setting x-openapicmd-keep to true',
        default: false,
        allowNo: true,
    }),
});
exports.removeUnreferencedComponents = removeUnreferencedComponents;
const strip = () => ({
    strip: core_1.Flags.string({
        char: 'C',
        description: 'Strip optional metadata such as examples and descriptions from definition',
        helpValue: 'default|all|openapi_client_axios|openapi_backend',
    }),
});
exports.strip = strip;
const validate = () => ({
    validate: core_1.Flags.boolean({ char: 'V', description: 'validate against openapi schema' }),
});
exports.validate = validate;
const header = () => ({
    header: core_1.Flags.string({ char: 'H', description: 'add request headers when calling remote urls', multiple: true }),
});
exports.header = header;
const apiRoot = () => ({
    root: core_1.Flags.string({ char: 'R', description: 'override API root path', helpValue: '/' }),
});
exports.apiRoot = apiRoot;
const parseOpts = () => ({
    dereference: core_1.Flags.boolean({ char: 'D', description: 'resolve $ref pointers' }),
    bundle: core_1.Flags.boolean({ char: 'B', description: 'resolve remote $ref pointers' }),
    ...(0, exports.apiRoot)(),
    ...(0, exports.header)(),
    ...(0, exports.validate)(),
    ...(0, exports.servers)(),
    ...(0, exports.inject)(),
    ...(0, exports.excludeExt)(),
    ...(0, exports.strip)(),
    ...(0, exports.removeUnreferencedComponents)(),
});
exports.parseOpts = parseOpts;
const serverOpts = () => ({
    port: core_1.Flags.integer({
        char: 'p',
        description: 'port',
        default: 9000,
        helpValue: '9000',
    }),
    logger: core_1.Flags.boolean({
        description: '[default: true] log requests',
        default: true,
        allowNo: true,
    }),
});
exports.serverOpts = serverOpts;
const outputFormat = () => ({
    format: core_1.Flags.string({
        char: 'f',
        description: '[default: yaml] output format',
        options: ['json', 'yaml', 'yml'],
        exclusive: ['json', 'yaml'],
    }),
    json: core_1.Flags.boolean({ description: 'format as json (short for -f json)', exclusive: ['format', 'yaml'] }),
    yaml: core_1.Flags.boolean({ description: 'format as yaml (short for -f yaml)', exclusive: ['format', 'json'] }),
});
exports.outputFormat = outputFormat;
const swaggerUIOpts = () => ({
    expand: core_1.Flags.string({
        description: '[default: list] default expansion setting for the operations and tags',
        options: ['full', 'list', 'none'],
    }),
    operationids: core_1.Flags.boolean({ description: '[default: true] display operationIds', default: true, allowNo: true }),
    filter: core_1.Flags.boolean({ description: '[default: true] enable filtering by tag', default: true, allowNo: true }),
    deeplinks: core_1.Flags.boolean({ description: '[default: true] allow deep linking', default: true, allowNo: true }),
    withcredentials: core_1.Flags.boolean({
        description: '[default: true] send cookies in "try it now"',
        default: true,
        allowNo: true,
    }),
    requestduration: core_1.Flags.boolean({
        description: '[default: true] display request durations in "try it now"',
        default: true,
        allowNo: true,
    }),
});
exports.swaggerUIOpts = swaggerUIOpts;
const securityOpts = () => ({
    security: core_1.Flags.string({ char: 's', description: 'use security scheme', multiple: true }),
    apikey: core_1.Flags.string({ char: 'k', description: 'set api key' }),
    token: core_1.Flags.string({ char: 't', description: 'set bearer token' }),
    username: core_1.Flags.string({ char: 'u', description: 'set basic auth username' }),
    password: core_1.Flags.string({ char: 'P', description: 'set basic auth password' }),
});
exports.securityOpts = securityOpts;
