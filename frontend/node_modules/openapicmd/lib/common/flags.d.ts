import { BooleanFlag } from '@oclif/core/lib/interfaces';
export declare const help: (overrides?: Partial<BooleanFlag<boolean>>) => {
    help: BooleanFlag<void>;
};
export declare const interactive: () => {
    interactive: BooleanFlag<boolean>;
};
export declare const servers: () => {
    server: import("@oclif/core/lib/interfaces").OptionFlag<string[], import("@oclif/core/lib/interfaces").CustomOptions>;
};
export declare const inject: () => {
    inject: import("@oclif/core/lib/interfaces").OptionFlag<string[], import("@oclif/core/lib/interfaces").CustomOptions>;
};
export declare const excludeExt: () => {
    'exclude-ext': import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
};
export declare const removeUnreferencedComponents: () => {
    'remove-unreferenced': BooleanFlag<boolean>;
};
export declare const strip: () => {
    strip: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
};
export declare const validate: () => {
    validate: BooleanFlag<boolean>;
};
export declare const header: () => {
    header: import("@oclif/core/lib/interfaces").OptionFlag<string[], import("@oclif/core/lib/interfaces").CustomOptions>;
};
export declare const apiRoot: () => {
    root: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
};
export declare const parseOpts: () => {
    'remove-unreferenced': BooleanFlag<boolean>;
    strip: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
    'exclude-ext': import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
    inject: import("@oclif/core/lib/interfaces").OptionFlag<string[], import("@oclif/core/lib/interfaces").CustomOptions>;
    server: import("@oclif/core/lib/interfaces").OptionFlag<string[], import("@oclif/core/lib/interfaces").CustomOptions>;
    validate: BooleanFlag<boolean>;
    header: import("@oclif/core/lib/interfaces").OptionFlag<string[], import("@oclif/core/lib/interfaces").CustomOptions>;
    root: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
    dereference: BooleanFlag<boolean>;
    bundle: BooleanFlag<boolean>;
};
export declare const serverOpts: () => {
    port: import("@oclif/core/lib/interfaces").OptionFlag<number, import("@oclif/core/lib/interfaces").CustomOptions>;
    logger: BooleanFlag<boolean>;
};
export declare const outputFormat: () => {
    format: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
    json: BooleanFlag<boolean>;
    yaml: BooleanFlag<boolean>;
};
export declare const swaggerUIOpts: () => {
    expand: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
    operationids: BooleanFlag<boolean>;
    filter: BooleanFlag<boolean>;
    deeplinks: BooleanFlag<boolean>;
    withcredentials: BooleanFlag<boolean>;
    requestduration: BooleanFlag<boolean>;
};
export declare const securityOpts: () => {
    security: import("@oclif/core/lib/interfaces").OptionFlag<string[], import("@oclif/core/lib/interfaces").CustomOptions>;
    apikey: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
    token: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
    username: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
    password: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces").CustomOptions>;
};
